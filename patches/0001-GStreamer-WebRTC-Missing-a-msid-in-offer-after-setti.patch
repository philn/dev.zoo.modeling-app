From 6d7fa27729b7e6308aff5b13638b0f7c514888c9 Mon Sep 17 00:00:00 2001
From: Carlos Bentzen <cadubentzen@igalia.com>
Date: Wed, 5 Jun 2024 10:34:19 -0700
Subject: [PATCH] [GStreamer][WebRTC] Missing a=msid in offer after setting
 codec preferences https://bugs.webkit.org/show_bug.cgi?id=275157

Reviewed by Philippe Normand.

When setting codec preferences on GstWebRTCRTPTransceiver, the caps object
did not contain an "a-msid" field, which causes the offer created by the
webrtcbin containing that transceiver to not include an `a=msid` line for it.

The issue is fixed by reusing the `a-msid` field from the pre-existent
codec preference, if one exists.

* LayoutTests/webrtc/msid-setCodecPreferences-expected.txt: Added.
* LayoutTests/webrtc/msid-setCodecPreferences.html: Added.
* Source/WebCore/Modules/mediastream/gstreamer/GStreamerRtpTransceiverBackend.cpp:
(WebCore::getMsidFromCurrentCodecPreferences):
(WebCore::GStreamerRtpTransceiverBackend::setCodecPreferences):

Canonical link: https://commits.webkit.org/279746@main
---
 .../msid-setCodecPreferences-expected.txt     |  3 +++
 .../webrtc/msid-setCodecPreferences.html      | 27 +++++++++++++++++++
 .../GStreamerRtpTransceiverBackend.cpp        | 21 +++++++++++++--
 3 files changed, 49 insertions(+), 2 deletions(-)
 create mode 100644 LayoutTests/webrtc/msid-setCodecPreferences-expected.txt
 create mode 100644 LayoutTests/webrtc/msid-setCodecPreferences.html

diff --git a/LayoutTests/webrtc/msid-setCodecPreferences-expected.txt b/LayoutTests/webrtc/msid-setCodecPreferences-expected.txt
new file mode 100644
index 000000000000..c965098c6433
--- /dev/null
+++ b/LayoutTests/webrtc/msid-setCodecPreferences-expected.txt
@@ -0,0 +1,3 @@
+
+PASS msid present in offer SDP after setting codec preferences
+
diff --git a/LayoutTests/webrtc/msid-setCodecPreferences.html b/LayoutTests/webrtc/msid-setCodecPreferences.html
new file mode 100644
index 000000000000..2f4f69a20506
--- /dev/null
+++ b/LayoutTests/webrtc/msid-setCodecPreferences.html
@@ -0,0 +1,27 @@
+<!doctype html>
+<html>
+    <head>
+        <meta charset="utf-8">
+        <title>Testing basic video exchange from offerer to receiver</title>
+        <script src="../resources/testharness.js"></script>
+        <script src="../resources/testharnessreport.js"></script>
+    </head>
+    <body>
+        <script src ="routines.js"></script>
+        <script>
+var track, firstConnection, secondConnection;
+promise_test(async (test) => {
+    if (window.testRunner)
+        testRunner.setUserMediaPermission(true);
+
+    let pc = new RTCPeerConnection();
+    let stream = await navigator.mediaDevices.getUserMedia({ video: true });
+	let track = stream.getVideoTracks()[0];
+    pc.addTrack(track, stream);
+    pc.getTransceivers()[0].setCodecPreferences([{mimeType: "video/VP8", clockRate: 90000}]);
+    let offer = await pc.createOffer();
+    assert_true(offer.sdp.includes(`a=msid:${stream.id} ${track.id}`), 'offer SDP includes a=msid line');
+}, "msid present in offer SDP after setting codec preferences");
+        </script>
+    </body>
+</html>
diff --git a/Source/WebCore/Modules/mediastream/gstreamer/GStreamerRtpTransceiverBackend.cpp b/Source/WebCore/Modules/mediastream/gstreamer/GStreamerRtpTransceiverBackend.cpp
index 93a45b645c9c..2a5fa2f638c9 100644
--- a/Source/WebCore/Modules/mediastream/gstreamer/GStreamerRtpTransceiverBackend.cpp
+++ b/Source/WebCore/Modules/mediastream/gstreamer/GStreamerRtpTransceiverBackend.cpp
@@ -109,7 +109,7 @@ bool GStreamerRtpTransceiverBackend::stopped() const
     return m_isStopped;
 }
 
-static inline WARN_UNUSED_RETURN ExceptionOr<GstCaps*> toRtpCodecCapability(const RTCRtpCodecCapability& codec, int& dynamicPayloadType)
+static inline WARN_UNUSED_RETURN ExceptionOr<GstCaps*> toRtpCodecCapability(const RTCRtpCodecCapability& codec, int& dynamicPayloadType, const char* msid)
 {
     if (!codec.mimeType.startsWith("video/"_s) && !codec.mimeType.startsWith("audio/"_s))
         return Exception { ExceptionCode::InvalidModificationError, "RTCRtpCodecCapability bad mimeType"_s };
@@ -135,16 +135,33 @@ static inline WARN_UNUSED_RETURN ExceptionOr<GstCaps*> toRtpCodecCapability(cons
         }
     }
 
+    if (msid)
+        gst_caps_set_simple(caps, "a-msid", G_TYPE_STRING, msid, nullptr);
+
     GST_DEBUG("Codec capability: %" GST_PTR_FORMAT, caps);
     return caps;
 }
 
+static GUniquePtr<char> getMsidFromCurrentCodecPreferences(GstWebRTCRTPTransceiver* transceiver)
+{
+    GRefPtr<GstCaps> currentCaps;
+    GUniquePtr<char> msid;
+    g_object_get(transceiver, "codec-preferences", &currentCaps.outPtr(), nullptr);
+    GST_TRACE_OBJECT(transceiver, "Current codec preferences: %" GST_PTR_FORMAT, currentCaps.get());
+    if (gst_caps_get_size(currentCaps.get()) > 0) {
+        auto* s = gst_caps_get_structure(currentCaps.get(), 0);
+        msid = GUniquePtr<char>(g_strdup(gst_structure_get_string(s, "a-msid")));
+    }
+    return msid;
+}
+
 ExceptionOr<void> GStreamerRtpTransceiverBackend::setCodecPreferences(const Vector<RTCRtpCodecCapability>& codecs)
 {
     auto gstCodecs = adoptGRef(gst_caps_new_empty());
+    GUniquePtr<char> msid = getMsidFromCurrentCodecPreferences(m_rtcTransceiver.get());
     int dynamicPayloadType = 96;
     for (auto& codec : codecs) {
-        auto result = toRtpCodecCapability(codec, dynamicPayloadType);
+        auto result = toRtpCodecCapability(codec, dynamicPayloadType, msid.get());
         if (result.hasException())
             return result.releaseException();
         gst_caps_append(gstCodecs.get(), result.releaseReturnValue());
-- 
2.45.1

